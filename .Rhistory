getwd()
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv", "nlme"))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
install.packages("caret")
mean(temp)
library(caret)
ver(r)
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(caret)
data(AlzheimerDisease)
library(data)
library(datasets)
data(AlzheimerDisease)
data(abalone)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(training)
View(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(testing)
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(kernlab)
library("kernlab")
install.packages("kernlab")
library("kernlab")
version()
ver
library(kernlab)
data(spam)
head(spam)
plot(density(spam$your[spam$type=="nonspam"]), col='blue', main="", xlab ="Frequency of 'your'")
lines(desnsity(spam$your[samp$type=="spam"]), col='red')
lines(density(spam$your[samp$type=="spam"]), col='red')
lines(density(spam$your[spam$type=="spam"]), col='red')
abline(v=0.5, col="black")
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
table(prediction, spam$type)/length(spam$type)
ibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
install.packages("caret")
library(caret)
install.packages(c("boot", "codetools", "CORElearn", "digest", "foreign", "highr", "httr", "jsonlite", "kernlab", "knitr", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "RColorBrewer", "RCurl", "reshape2", "rmarkdown", "swirl"))
library(caret)
library(caret)
install.packages("manipulate")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
# create a new DF of predictors and diagnosis
df <- data.frame(diagnosis, predictors_IL)
# create a training and testing set from this DF
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confusion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.package(e1071)
predictions <- predict(modelFit, newdata = testing)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
testing
training
View(training)
setwd("~/")
setwd("~/")
getwd(")
setwd("~/Downloads/DataScience/Practical Machine Learning/Assignment")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
setwd("~/Downloads/DataScience/Practical Machine Learning/Assignment")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
```{r}
```{r}
source("PredictionAssignmentWriteUp.Rmd")
getwd()
```{r}
echo = TRUE
options(scipen = 1)
```
---
output: pdf_document
---
Regression Models: Peer Assessment 1
----------------------------------------
output: html_document
---
### Visible settings
source("PredictionAssignmentWriteUp.Rmd")
source("PredictionAssignmentWriteUp.Rmd")
---
install.packages("rmarkdown")
install.packages("rmarkdown")
